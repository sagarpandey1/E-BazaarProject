package business.shoppingcartsubsystem;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

import middleware.exceptions.DatabaseException;
import presentation.control.BrowseSelectUIControl;
import presentation.data.BrowseSelectData;
import presentation.gui.ShoppingCartWindow;
import business.exceptions.BackendException;
import business.exceptions.BusinessException;
import business.exceptions.RuleException;
import business.externalinterfaces.Address;
import business.externalinterfaces.CartItem;
import business.externalinterfaces.CreditCard;
import business.externalinterfaces.CustomerProfile;
import business.externalinterfaces.DbClassShoppingCartForTest;
import business.externalinterfaces.Rules;
import business.externalinterfaces.ShoppingCart;
import business.externalinterfaces.ShoppingCartSubsystem;
import business.usecasecontrol.BrowseAndSelectController;

public enum ShoppingCartSubsystemFacade implements ShoppingCartSubsystem {
	INSTANCE;

	ShoppingCartImpl liveCart = new ShoppingCartImpl(new LinkedList<CartItem>());
	ShoppingCartImpl savedCart;
	Integer shopCartId;
	CustomerProfile customerProfile;
	Logger log = Logger.getLogger(this.getClass().getPackage().getName());

	// interface methods
	public void setCustomerProfile(CustomerProfile customerProfile) {
		this.customerProfile = customerProfile;
	}

	public void makeSavedCartLive() {
		liveCart = savedCart;
	}

	public ShoppingCart getLiveCart() {
		return liveCart;
	}


	public void retrieveSavedCart() throws BackendException {
		try {
			DbClassShoppingCart dbClass = new DbClassShoppingCart();
			ShoppingCartImpl cartFound = dbClass.retrieveSavedCart(customerProfile);
			if(cartFound == null) {
				savedCart = new ShoppingCartImpl(new ArrayList<CartItem>());
			} else {
				savedCart = cartFound;
			}
		} catch(DatabaseException e) {
			throw new BackendException(e);
		}

	}

	public void deleteSavedCart() throws BackendException{
		try {
			DbClassShoppingCart dbClass = new DbClassShoppingCart();
			dbClass.deleteSavedCart(liveCart);
		} catch (DatabaseException e) {
			throw new BackendException(e);
		}
	}

	public void updateShoppingCartItems(List<CartItem> list) {
		liveCart.setCartItems(list);
	}

	public List<CartItem> getCartItems() {
		return liveCart.getCartItems();
	}

	//static methods
	public static CartItem createCartItem(String productName, String quantity,
            String totalprice) {
		try {
			return new CartItemImpl(productName, quantity, totalprice);
		} catch(BackendException e) {
			throw new RuntimeException("Can't create a cartitem because of productid lookup: " + e.getMessage());
		}
	}


	//interface methods for testing

	public ShoppingCart getEmptyCartForTest() {
		return new ShoppingCartImpl();
	}


	public CartItem getEmptyCartItemForTest() {
		return new CartItemImpl();
	}

	@Override
	public void clearLiveCart() {
		liveCart.clearCart();
		BrowseSelectData.INSTANCE.updateCartData();
	}

	@Override
	public List<CartItem> getLiveCartItems() {

		return liveCart.getCartItems();
	}

	@Override
	public void setShippingAddress(Address addr) {

		liveCart.setShipAddress(addr);
	}

	@Override
	public void setBillingAddress(Address addr) {

		liveCart.setBillAddress(addr);
	}

	@Override
	public void setPaymentInfo(CreditCard cc) {

		liveCart.setPaymentInfo(cc);
	}

	@Override
	public void saveLiveCart() throws BackendException {

		try{
			DbClassShoppingCart dbClass = new DbClassShoppingCart();
			dbClass.saveCart(customerProfile, liveCart);;

		}catch(DatabaseException e){
			throw new BackendException(e);
		}
	}

	@Override
	public void runShoppingCartRules() throws RuleException, BusinessException {

//		if(liveCart.isEmpty()) throw new BusinessException("an empty cart "
//				+ "can not be checked out!");

		new RulesShoppingCart(liveCart).runRules();
	}

	@Override
	public void runFinalOrderRules() throws RuleException, BusinessException {

		new RulesFinalOrder(liveCart).runRules();
		//throw new BusinessException("quantity is more than the available in stock!");
	}

	@Override
	public void addCartItem(String name, String quantity, String unitPrice, String totalPrice) throws BackendException {

		CartItemImpl newCartItem = new CartItemImpl(name, quantity, totalPrice);
		liveCart.addItem(newCartItem);
	}


	public DbClassShoppingCartForTest getGenericDbClassShoppingCart() {
		// TODO Auto-generated method stub
		return new DbClassShoppingCart();
	}

	public CartItem createCartItem(int productid, String quantity, String totalprice) {
		// TODO Auto-generated method stub
		return new CartItemImpl(productid, quantity, totalprice);
	}



}
